//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "fMainForm.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TMainForm *MainForm;
//---------------------------------------------------------------------------

const s32 TMainForm::CPathfinder::notfinished = 0;
const s32 TMainForm::CPathfinder::notStarted = 0;
const s32 TMainForm::CPathfinder::found = 1;
const s32 TMainForm::CPathfinder::nonexistent = 2;
const s32 TMainForm::CPathfinder::walkable = 0;
const s32 TMainForm::CPathfinder::unwalkable = 1;

//---------------------------------------------------------------------------
__fastcall TMainForm::TMainForm(TComponent* Owner)
    : TForm(Owner)
{
    startX = startY = 0;
    endX = endY = 0;

    LARGE_INTEGER HighPerformanceFreq;

	HighPerformanceTimerSupport = QueryPerformanceFrequency(&HighPerformanceFreq)==0 ? false : true;
	performanceUnit = 1.0f / double(HighPerformanceFreq.QuadPart);
	performanceCounterToMs = 1000.0f / HighPerformanceFreq.QuadPart;

	String str;
	str.sprintf("Timer initialization:");

    Memo1->Lines->Add(str);

	if (!HighPerformanceTimerSupport || HighPerformanceFreq.QuadPart<1000)
	{	
		str.sprintf(" Insufficient performance query resolution on this system!");

        Memo1->Lines->Add(str);
	}
	else
	{

		str.sprintf(" Query resolution 1/%u sec", HighPerformanceFreq.QuadPart);
        Memo1->Lines->Add(str);
		str.sprintf(" Timer OK");
        Memo1->Lines->Add(str);
	}
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::Exit1Click(TObject *Sender)
{
    Close();
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::OpenMap1Click(TObject *Sender)
{
    if (OpenPictureDialog1->Execute())
    {
        Image2->Picture->LoadFromFile(OpenPictureDialog1->FileName);

        Image1->Width = Image2->Picture->Width;
        Image1->Height = Image2->Picture->Height;

        Image1->Left = 0;
        Image1->Top = 0;

        Image1->Picture->Assign(Image2->Picture);

        Pathfinder.InitializePathfinder(Image1->Picture->Width, Image1->Picture->Height);

        for (int y=0; y<Pathfinder.mapHeight; y++)
        {
            for (int x=0; x<Pathfinder.mapWidth; x++)
            {
                u8 r = GetRValue(Image1->Picture->Bitmap->Canvas->Pixels[x][y]);
    		    Pathfinder.walkability[x][y]     = r==255 ? 1 : 0;
            }
        }
    }
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::Image1MouseUp(TObject *Sender,
      TMouseButton Button, TShiftState Shift, int X, int Y)
{
    if (Button==mbLeft)
    {
        startX = endX = X;
        startY = endY = Y;
    }
    else
    if (Button==mbRight)
    {
        endX = X;
        endY = Y;

        startX = 144;
        startY = 62;
        endX = 46;
        endY = 201;

        FindPath();
    }
}
//---------------------------------------------------------------------------

int TMainForm::FindPath()
{
    Image1->Picture->Assign(Image2->Picture);

    String str =
        "Finding path from " +
        (String)startX + ":" + (String)startY +
        " to " +
        (String)endX + ":" + (String)endY +
        " . . .";
    Memo1->Lines->Add(str);

	double start_ms = 0;

    if (HighPerformanceTimerSupport)
    {
		LARGE_INTEGER nTime;
        QueryPerformanceCounter(&nTime);
        start_ms = (nTime.QuadPart) * performanceCounterToMs;
    }
	else
		start_ms = GetTickCount();

    bool finded = false;

    if (startX>=0 && startX<Pathfinder.mapWidth &&
        endX>=0 && endX<Pathfinder.mapWidth &&
        startY>=0 && startY<Pathfinder.mapHeight &&
        endY>=0 && endY<Pathfinder.mapHeight
        )
    {
        // Finds a path using A*
        finded = Pathfinder.FindPath( startX, startY, endX, endY )==CPathfinder::found;
    }
    else
    {
        str.sprintf(
            " Out of data bounds!"
            );        
        Memo1->Lines->Add(str);
    }

    //////////////////////////////////////////////////////////////////////

    double end_ms = 0;

	if (HighPerformanceTimerSupport)
    {
		LARGE_INTEGER nTime;
        QueryPerformanceCounter(&nTime);
        end_ms = (nTime.QuadPart) * performanceCounterToMs;
    }
	else
		end_ms = GetTickCount();

    if (finded)
    {
        // storing finded path

        for (s32 p=0; p<2*Pathfinder.pathLength; p+=2)
        {
            int x = Pathfinder.pathBank[p];
            int y = Pathfinder.pathBank[p+1];

            Image1->Canvas->Pixels[x][y] = 0x00ff0000;     
        }

        str.sprintf( " Finded!" );
        Memo1->Lines->Add(str);
    }
    else
    {
        str.sprintf( " Can't find!" );
        Memo1->Lines->Add(str);
    }

    str.sprintf(
        " Elapsed %.4f ms",
        end_ms-start_ms
        );   
    Memo1->Lines->Add(str);
}
//-----------------------------------------------------------------------------

// Allocates memory for the pathfinder.
void TMainForm::CPathfinder::InitializePathfinder(int width, int height)
{
	if (!(width>0 &&  height>0))
		return;

	// free old memory

	DeinitializePathfinder();

	// allocate new memory

	mapWidth  = width;
	mapHeight = height;

	int x = 0, y=0;

	walkability     = new u8*[mapWidth];
	influence       = new u8*[mapWidth];
	heightinfluence = new u16*[mapWidth];

	for (x=0; x<mapWidth; x++)
	{
		walkability[x]     = new u8 [mapHeight];
		influence[x]       = new u8 [mapHeight];
		heightinfluence[x] = new u16 [mapHeight];

		for (y=0; y<mapHeight; y++)
		{
			walkability[x][y] = 0;
			influence  [x][y] = 1;	
			heightinfluence[x][y] = 1;
		}
	}

	openList = new int [mapWidth*mapHeight+2];
	openX    = new int [mapWidth*mapHeight+2];
	openY    = new int [mapWidth*mapHeight+2];

	for (x=0; x<(mapWidth*mapHeight+2); x++)
	{
		openList[x]=0;
		openX[x]=0;
		openY[x]=0;
	}

	whichList = new int* [mapWidth+1];

	for (x=0; x<(mapWidth+1); x++)
	{
		whichList[x] = new int [mapHeight+1];

		for (y=0; y<(mapHeight+1); y++)
		{
			whichList[x][y] = 0;
		}
	}	

	parentX = new int* [mapWidth+1];
	parentY = new int* [mapWidth+1];

	for (x=0; x<(mapWidth+1); x++)
	{
		parentX[x] = new int [mapHeight+1];
		parentY[x] = new int [mapHeight+1];

		for (y=0; y<(mapHeight+1); y++)
		{
			parentX[x][y] = 0;
			parentY[x][y] = 0;	
		}
	}

	Fcost = new int [mapWidth*mapHeight+2];

	Gcost = new int* [mapWidth+1];

	for (x=0; x<(mapWidth+1); x++)
	{
		Gcost[x] = new int [mapHeight+1];
	}

	Hcost = new int [mapWidth*mapHeight+2];

	pathBank = new int [4];
}

//-----------------------------------------------------------------------------

// Frees memory used by the pathfinder.
void TMainForm::CPathfinder::DeinitializePathfinder()
{
	if (!(mapWidth>0 && mapHeight>0))
		return;

	int x = 0;

	for (x=0; x<mapWidth; x++)
	{
		SAFE_DELETE_ARRAY(walkability[x]);
		SAFE_DELETE_ARRAY(influence[x]);
		SAFE_DELETE_ARRAY(heightinfluence[x]);
	}
	SAFE_DELETE_ARRAY(walkability);
	SAFE_DELETE_ARRAY(influence);
	SAFE_DELETE_ARRAY(heightinfluence);

	SAFE_DELETE_ARRAY(openList);
	
	for (x=0; x<(mapWidth+1); x++)
		SAFE_DELETE_ARRAY(whichList[x]);
	SAFE_DELETE_ARRAY(whichList);

	SAFE_DELETE_ARRAY(openX);
	SAFE_DELETE_ARRAY(openY);

	for (x=0; x<(mapWidth+1); x++)
	{
		SAFE_DELETE_ARRAY(parentX[x]);
		SAFE_DELETE_ARRAY(parentY[x]);
	}
	SAFE_DELETE_ARRAY(parentX);
	SAFE_DELETE_ARRAY(parentY);

	SAFE_DELETE_ARRAY(Fcost);
	
	for (x=0; x<(mapWidth+1); x++)
		SAFE_DELETE_ARRAY(Gcost[x]);
	SAFE_DELETE_ARRAY(Gcost);

	SAFE_DELETE_ARRAY(Hcost);

	SAFE_DELETE_ARRAY(pathBank);

	mapWidth = mapHeight = 0;
}

//-----------------------------------------------------------------------------

// Finds a path using A*
int TMainForm::CPathfinder::FindPath(
	int startingX, int startingY, int targetX, int targetY
	)
{
	int onOpenList=0, parentXval=0, parentYval=0,
		a=0, b=0, m=0, u=0, v=0, temp=0, corner=0, numberOfOpenListItems=0,
		addedGCost=0, tempGcost = 0, path = 0,
		tempx, pathX, pathY, cellPosition,
		newOpenListItemID=0;

	int startX = startingX;
	int startY = startingY;	

	//2.Quick Path Checks: Under the some circumstances no path needs to
	//	be generated ...

	//	If starting location and target are in the same location...
	if (startX == targetX && startY == targetY && pathLocation > 0)
		return found;
	if (startX == targetX && startY == targetY && pathLocation == 0)
		return nonexistent;

	//	If target square is unwalkable, return that it's a nonexistent path.
	if (walkability[targetX][targetY] == unwalkable)
		goto noPath;

	//3.Reset some variables that need to be cleared
	if (onClosedList > 1000000) //reset whichList occasionally
	{
		for (int x = 0; x < mapWidth;x++) 
		{
			for (int y = 0; y < mapHeight;y++)
				whichList [x][y] = 0;
		}
		onClosedList = 10;	
	}
	onClosedList = onClosedList+2; //changing the values of onOpenList and onClosed list is faster than redimming whichList() array
	onOpenList = onClosedList-1;
	pathLength = notStarted;//i.e, = 0
	pathLocation = notStarted;//i.e, = 0
	Gcost[startX][startY] = 0; //reset starting square's G value to 0

	//4.Add the starting location to the open list of squares to be checked.
	numberOfOpenListItems = 1;
	openList[1] = 1;//assign it as the top (and currently only) item in the open list, which is maintained as a binary heap (explained below)
	openX[1] = startX ; openY[1] = startY;

	do
	//5.Do the following until a path is found or deemed nonexistent.
	{
	
		if (numberOfOpenListItems != 0)
		//6.If the open list is not empty, take the first cell off of the list.
		//	This is the lowest F cost cell on the open list.
		{
			//7. Pop the first item off the open list.
			parentXval = openX[openList[1]];
			parentYval = openY[openList[1]]; //record cell coordinates of the item
			whichList[parentXval][parentYval] = onClosedList;//add the item to the closed list

			//	Open List = Binary Heap: Delete this item from the open list, which
			//  is maintained as a binary heap. For more information on binary heaps, see:
			//	http://www.policyalmanac.org/games/binaryHeaps.htm
			numberOfOpenListItems = numberOfOpenListItems - 1;//reduce number of open list items by 1	
				
			//	Delete the top item in binary heap and reorder the heap, with the lowest F cost item rising to the top.
			openList[1] = openList[numberOfOpenListItems+1];//move the last item in the heap up to slot #1
			v = 1;

			//	Repeat the following until the new item in slot #1 sinks to its proper spot in the heap.
			do
			{
				u = v;		
				if (2*u+1 <= numberOfOpenListItems) //if both children exist
				{
	 				//Check if the F cost of the parent is greater than each child.
					//Select the lowest of the two children.
					if (Fcost[openList[u]] >= Fcost[openList[2*u]]) 
						v = 2*u;
					if (Fcost[openList[v]] >= Fcost[openList[2*u+1]]) 
						v = 2*u+1;		
				}
				else
				{
					if (2*u <= numberOfOpenListItems) //if only child #1 exists
					{
	 					//Check if the F cost of the parent is greater than child #1	
						if (Fcost[openList[u]] >= Fcost[openList[2*u]]) 
							v = 2*u;
					}
				}

				if (u != v) //if parent's F is > one of its children, swap them
				{
					temp = openList[u];
					openList[u] = openList[v];
					openList[v] = temp;			
				}
				else
					break; //otherwise, exit loop
			}
			while (true);//reorder the binary heap

			//7.Check the adjacent squares. (Its "children" -- these path children
			//	are similar, conceptually, to the binary heap children mentioned
			//	above, but don't confuse them. They are different. Path children
			//	are portrayed in Demo 1 with grey pointers pointing toward
			//	their parents.) Add these adjacent child squares to the open list
			//	for later consideration if appropriate (see various if statements
			//	below).
			for (b = parentYval-1; b <= parentYval+1; b++)
			{
				for (a = parentXval-1; a <= parentXval+1; a++)
				{
					//	If not off the map (do this first to avoid array out-of-bounds errors)
					if (a != -1 && b != -1 && a != mapWidth && b != mapHeight)
					{

						//	If not already on the closed list (items on the closed list have
						//	already been considered and can now be ignored).			
						if (whichList[a][b] != onClosedList) 
						{ 						
							//	If not a wall/obstacle square.
							if (walkability [a][b] != unwalkable) 
							{ 								
								//	Don't cut across corners
								corner = walkable;	
								if (a == parentXval-1) 
								{
									if (b == parentYval-1)
									{
										if (walkability[parentXval-1][parentYval] == unwalkable
											|| walkability[parentXval][parentYval-1] == unwalkable)
											corner = unwalkable;
									}
									else if (b == parentYval+1)
									{
										if (walkability[parentXval][parentYval+1] == unwalkable
											|| walkability[parentXval-1][parentYval] == unwalkable) 
											corner = unwalkable; 
									}
								}
								else if (a == parentXval+1)
								{
									if (b == parentYval-1)
									{
										if (walkability[parentXval][parentYval-1] == unwalkable 
											|| walkability[parentXval+1][parentYval] == unwalkable) 
											corner = unwalkable;
									}
									else if (b == parentYval+1)
									{
										if (walkability[parentXval+1][parentYval] == unwalkable 
											|| walkability[parentXval][parentYval+1] == unwalkable)
											corner = unwalkable; 
									}
								}	

								if (corner == walkable) 
								{						
								//	If not already on the open list, add it to the open list.			
									if (whichList[a][b] != onOpenList) 
									{	
										//Create a new open list item in the binary heap.
										newOpenListItemID = newOpenListItemID + 1; //each new item has a unique ID #
										m = numberOfOpenListItems+1;
										openList[m] = newOpenListItemID;//place the new open list item (actually, its ID#) at the bottom of the heap
										openX[newOpenListItemID] = a;
										openY[newOpenListItemID] = b;//record the x and y coordinates of the new item

										//Figure out its G cost

                                        if (a==parentXval || b==parentYval)
											addedGCost = 10; //cost of going to non-diagonal squares
										else
											addedGCost = 14; //cost of going to diagonal squares

										Gcost[a][b] = 
											Gcost[parentXval][parentYval] +
											addedGCost * influence[a][b] * heightinfluence[a][b];

										//Figure out its H and F costs and parent
										Hcost[openList[m]] = 10*(abs(a - targetX) + abs(b - targetY));
										Fcost[openList[m]] =  ( Gcost[a][b] + Hcost[openList[m]] );
										parentX[a][b] = parentXval ; parentY[a][b] = parentYval;	

										//Move the new open list item to the proper place in the binary heap.
										//Starting at the bottom, successively compare to parent items,
										//swapping as needed until the item finds its place in the heap
										//or bubbles all the way to the top (if it has the lowest F cost).
										while (m != 1) //While item hasn't bubbled to the top (m=1)	
										{
											//Check if child's F cost is < parent's F cost. If so, swap them.	
											if (Fcost[openList[m]] <= Fcost[openList[m/2]])
											{
												temp = openList[m/2];
												openList[m/2] = openList[m];
												openList[m] = temp;
												m = m/2;
											}
											else
												break;
										}
										numberOfOpenListItems = numberOfOpenListItems+1;//add one to the number of items in the heap

										//Change whichList to show that the new item is on the open list.
										whichList[a][b] = onOpenList;
									}								
									else //If whichList(a,b) = onOpenList
									//8.If adjacent cell is already on the open list, check to see if this 
									//	path to that cell from the starting location is a better one. 
									//	If so, change the parent of the cell and its G and F costs.	
									{
                                        //Figure out the G cost of this possible new path

                                        if (a==parentXval || b==parentYval)
											addedGCost = 10; //cost of going to non-diagonal squares
										else
											addedGCost = 14; //cost of going to diagonal squares

										tempGcost = 
											Gcost[parentXval][parentYval] +
											addedGCost * influence[a][b] * heightinfluence[a][b];
										
										//If this path is shorter (G cost is lower) then change
										//the parent cell, G cost and F cost. 		
										if ( tempGcost < Gcost[a][b]) //if G cost is less,
										{
											parentX[a][b] = parentXval; //change the square's parent
											parentY[a][b] = parentYval;
											Gcost[a][b] = tempGcost;//change the G cost			

											//Because changing the G cost also changes the F cost, if
											//the item is on the open list we need to change the item's
											//recorded F cost and its position on the open list to make
											//sure that we maintain a properly ordered open list.
											for (int x = 1; x <= numberOfOpenListItems; x++) //look for the item in the heap
											{
												if (openX[openList[x]] == a && openY[openList[x]] == b) //item found
												{
													Fcost[openList[x]] = ( Gcost[a][b] + Hcost[openList[x]] );//change the F cost
													
													//See if changing the F score bubbles the item up from it's current location in the heap
													m = x;
													while (m != 1) //While item hasn't bubbled to the top (m=1)	
													{
														//Check if child is < parent. If so, swap them.	
														if (Fcost[openList[m]] < Fcost[openList[m/2]])
														{
															temp = openList[m/2];
															openList[m/2] = openList[m];
															openList[m] = temp;
															m = m/2;
														}
														else
															break;
													} 
													break; //exit for x = loop

												} //If openX(openList(x)) = a

											} //For x = 1 To numberOfOpenListItems

										}//If tempGcost < Gcost(a,b)

									}//else If whichList(a,b) = onOpenList	

								}//If not cutting a corner

							}//If not a wall/obstacle square.

						}//If not already on the closed list 

					}//If not off the map

				}//for (a = parentXval-1; a <= parentXval+1; a++){

			}//for (b = parentYval-1; b <= parentYval+1; b++){

		}//if (numberOfOpenListItems != 0)	
		else
		//9.If open list is empty then there is no path.	
		{
			path = nonexistent; break;
		}  

		//If target is added to open list then path has been found.
		if (whichList[targetX][targetY] == onOpenList)
		{
			path = found; break;
		}

	}
	while (1);//Do until path is found or deemed nonexistent	
	
	if (path == found)
	//10. Save the path if it exists.
	{
		//a.Working backwards from the target to the starting location by checking
		//	each cell's parent, figure out the length of the path.
		pathX = targetX; pathY = targetY;
		do
		{
			//Look up the parent of the current cell.	
			tempx = parentX[pathX][pathY];		
			pathY = parentY[pathX][pathY];
			pathX = tempx;

			//Figure out the path length
			pathLength = pathLength + 1;
		}
		while (pathX != startX || pathY != startY);

		//b.Resize the data bank to the right size in bytes
		SAFE_DELETE_ARRAY(pathBank);
		pathBank = new int [pathLength*8];

		//c. Now copy the path information over to the databank. Since we are
		//	working backwards from the target to the start location, we copy
		//	the information to the data bank in reverse order. The result is
		//	a properly ordered set of path data, from the first step to the
		//	last.
		pathX = targetX ; pathY = targetY;
		cellPosition = pathLength*2;//start at the end	
		do
		{
			cellPosition = cellPosition - 2;//work backwards 2 integers
			pathBank[cellPosition] = pathX;
			pathBank[cellPosition+1] = pathY;

			//d.Look up the parent of the current cell.	
			tempx = parentX[pathX][pathY];		
			pathY = parentY[pathX][pathY];
			pathX = tempx;

			//e.If we have reached the starting square, exit the loop.	
		}
		while (pathX != startX || pathY != startY);	

		//11.Read the first path step into xPath/yPath arrays
		xPath = pathBank[0];
		yPath = pathBank[1];

	} // if (path == found)

	return path;

noPath:	

	//12.If there is no path to the selected target, set the pathfinder's
	//	xPath and yPath equal to its current location and return that the
	//	path is nonexistent.

	xPath = startingX;
	yPath = startingY;

	return nonexistent;
}

//----------------------------------------------------------------------------

void TMainForm::CPathfinder::swapWalkabilityBuffers()
{
	if (!influence)
		return;		

	s32 line_size = sizeof(u8)*mapHeight;

	s32 x=0;

	for (x=0; x<mapWidth; x++)
	{	
		memset(influence[x], (u8)1, line_size);		
	}
}

//----------------------------------------------------------------------------

void TMainForm::CPathfinder::mapWalkabilityBuffer(s32 x, s32 y, u8 weight)
{
	if (x>=0 && y>=0 && x<mapWidth && y<mapHeight)
	{
		s32 newinfl = influence[x][y] + weight;

		CHECK_RANGE(newinfl, 0, 255);

		influence[x][y] = newinfl;
	}
}

//----------------------------------------------------------------------------

bool TMainForm::CPathfinder::isWalkable(s32 x, s32 y)
{
	if (x>=0 && y>=0 && x<mapWidth && y<mapHeight)
	{
		return ( walkability[x][y] == 0 );
	}

	return false;
}

//----------------------------------------------------------------------------

u8 TMainForm::CPathfinder::getInfluence(s32 x, s32 y)
{
	if (x>=0 && y>=0 && x<mapWidth && y<mapHeight)
	{
		return  influence[x][y];
	}

	return 0;
}

//----------------------------------------------------------------------------

u16 TMainForm::CPathfinder::getHeightInfluence(s32 x, s32 y)
{
	if (x>=0 && y>=0 && x<mapWidth && y<mapHeight)
	{
		return  heightinfluence[x][y];
	}

	return 0;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::FormDestroy(TObject *Sender)
{
    Pathfinder.DeinitializePathfinder();    
}
//---------------------------------------------------------------------------
